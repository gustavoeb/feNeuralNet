/**

This is are aditional methods to the factory Mat structure.

*/

require Math;
require FileIO;
require Containers;

/// \dfgPresetOmit
function Mat(Mat_d mat) {
  this.rows = mat.rows();
  this.cols = mat.cols();

  Float64 doubleVals[];
  doubleVals = mat.getAll();
  this.vals.resize(doubleVals.size());
  
  for(Integer i=0; i<doubleVals.size(); i++){
    this.vals[i] = Scalar(doubleVals[i]);
  }
}

/// A constructor that will read matrices from .txt files. MATlab's dlmwrite() notation is expected.
/// \param file A text file in MATlabs ASCII formatting for matrices.
/// \dfgPresetFolder Mat
function Mat MatFromCSV(FilePath file) {
  if(!file.exists())
    throw FUNC + ": file " + file + " does not exist.";
  if(!file.extension())
    throw FUNC + ": file " + file + " extension not supported.";
  TextReader reader = TextReader(file.string());
  String row[] = reader.readLine().split(',');
  reader.seek(0);
  String all[] = reader.readAll().splitAny(',\n');
  Scalar allScalars[];
  for (Integer i = 0; i < all.size()-1; i++) {
      allScalars.push(all[i].toScalar());
  }
  Integer cols = row.size();
  Integer rows = (all.size()-1)/row.size();
  Mat mat(rows,cols);
  mat.setAll(allScalars);

  return mat;
}

/// A constructor of random values (0 > val < 1).
/// \param rows number of rows
/// \param cols number of comuns
/// \dfgPresetFolder Mat
function Mat Rand(Integer seed, Integer rows, Integer cols) {
  Mat mat(rows,cols);
  Scalar randVals[];
  randVals = mathRandomFloat32Array (rows*cols, seed, 1, 1, 0.0, 1.0);
  mat.setAll(randVals);
  return mat;
}

/// Gell all the matrix element as a scalar array
/// \dfgPresetOmit
function Scalar[] Mat.getAll() {
  return this.vals;
}

/// \dfgPresetOmit
function Scalar Mat.get(in Integer index) {
  return this.vals[index];
}

/// A value setter for a single value using a single unidimensional index.
/// \param index An unidimensional index describing a position in a matrix counting elements from left to right, top to bottom.
/// \param value A scalar value to be set.
/// \dfgPresetTitle Set_unidimensional
/// \dfgPresetOmit
function Mat.set!(Integer index, Scalar value) {
  this.vals[index] = value;
}

/// A value setter for a single value in multiple indices.
/// \param index An array of unidimensional indices describing a position in a matrix counting elements from left to right, top to bottom.
/// \param value A scalar value to be set in all positions of the index array.
/// \dfgPresetTitle SetMany_unidimensional
/// \dfgPresetOmit
function Mat.set!(Integer set[], Scalar value) {
  for (Integer i = 0; i < set.size(); i++) {
    this.vals[set[i]] = value;
  }
}

/// Substitutes the matrix value contatiner.
/// \dfgPresetOmit
inline Mat.setAll!(Scalar vals[]) {
  if(this.vals.size() != vals.size())
    throw FUNC + ": size of array must match the matrix's number of elements (" + this.vals.size() + " vs " + vals.size() + ")";
  this.vals = vals;
}

/// A value setter for a multiple values in multiple indices.
/// \param index An array of unidimensional indices describing a position in a matrix counting elements from left to right, top to bottom.
/// \param value An array of scalar values to be set in all positions of the index array.
/// \dfgPresetTitle SetArray_unidimensional
/// \dfgPresetOmit
function Mat.set!(Integer set[], Scalar value[]) {
  if (set.size() != value.size())
    throw FUNC + ": number of indices is different from number of values (" + set.size() + " of " + value.size() + ")";
  for (Integer i = 0; i < set.size(); i++) {
    this.vals[set[i]] = value[i];
  }
}

/// A value getter for a row in a matrix.
/// \param index The index of the row.
function Scalar[] Mat.getRow(Integer index) {
  Scalar row[];
  if (index > this.rows)
    throw FUNC + ": row index greater than number of rows (" + index + " of " + this.rows + ")";
  if (index < 0)
    throw FUNC + ": row index should be greater than zero (got " + index + ")";
  for (Integer i = 0; i < this.cols; i++) {
    row.push(this.vals[(index)*this.cols+i]);
  }
  return row;
}

/// A value setter for a row in a matrix.
/// \param index The index of the row.
function Mat.setRow!(Integer index, Scalar vals[]) {
  if (index > this.rows)
    throw FUNC + ": row index greater than number of rows (" + index + " of " + this.rows + ")";
  if (index < 0)
    throw FUNC + ": row index should be greater than zero (got " + index + ")";
  if (vals.size() != this.cols)
    throw FUNC + ": input values do not match do not match # of elements in row (" + vals.size() + " of " + this.cols + ")";
  for (Integer i = 0; i < this.cols; i++) {
    this.vals[(index)*this.cols+i] = vals[i];
  }
}

/// A value getter for a column in a matrix.
/// \param index The index of the column.
function Scalar[] Mat.getColumn(Integer index) {
  Scalar column[];
  if (index > this.cols)
    throw FUNC + ": colum index greater than number of columns (" + index + " of " + this.cols + ")";
  if (index < 0)
    throw FUNC + ": column index should be greater than zero (got " + index + ")";
  for (Integer i = 0; i <= this.rows - 1; i++) {
    column.push(this.vals[(i)*this.cols+index]);
  }
  return column;
}

/// A value setter for a column in a matrix.
/// \param index The index of the column.
function Mat.setColumn!(Integer index, Scalar vals[]) {
  Scalar column[];
  if (index > this.cols)
    throw FUNC + ": colum index greater than number of columns (" + index + " of " + this.cols + ")";
  if (index < 0)
    throw FUNC + ": column index should be greater than zero (got " + index + ")";
  if (vals.size() != this.rows)
    throw FUNC + ": input values do not match do not match # of elements in column (" + vals.size() + " of " + this.rows + ")";
  for (Integer i = 0; i <= this.rows - 1; i++) {
    this.vals[(i)*this.cols+index] = vals[i];
  }
}

/// Concatenates two matrices vertically.
/// \param mat A matrix to be appended after the last row
/// \dfgPresetOmit
function Mat.vertcat!(Mat mat) {
  if (this.cols != mat.cols)
    throw FUNC + ": incompatible dimensions (" + this.sizeDesc() + " vs. " + mat.sizeDesc() + ")";
  this.rows = this.rows + mat.rows;
  this.vals = this.vals + mat.vals;
}

/// Concatenates two matrices horizontally.
/// \param mat A matrix to be appended after the last column.
/// \dfgPresetOmit
function Mat.horzcat!(in Mat mat) {
  // This is a sloppy implementation.
  // Should refactor when possible.
  Mat thisClone = this.transpose();
  Mat matClone = mat.transpose();
  thisClone.vertcat(matClone);
  this = thisClone.transpose();
}


/// Multiplies a matrix by a column vector.
/// \param vector Array of scalar values for the multiplication.
function Mat Mat.multiplyByColVector(Scalar vector[]) {
  Mat columnVec(1,vector.size());
  columnVec.setAll(vector);
  return this * columnVec;
}

/// Multiplies a matrix by a row vector.
/// \param vector Array of scalar values for the multiplication.
function Mat Mat.multiplyByRowVector(Scalar vector[]) {
  Mat rowVec(vector.size(),1);
  rowVec.setAll(vector);
  return this * rowVec;
}

/// Multiplies a matrix by a column vector.
/// \param vector Array of scalar values for the multiplication.
function Mat Mat.multiplyColVectorByMat(Scalar vector[]) {
  Mat columnVec(1,vector.size());
  columnVec.setAll(vector);
  return columnVec * this;
}

/// Multiplies a matrix by a row vector.
/// \param vector Array of scalar values for the multiplication.
function Mat Mat.multiplyRowVectorByMat(Scalar vector[]) {
  Mat rowVec(vector.size(),1);
  rowVec.setAll(vector);
  return rowVec * this;
}

/// A value getter for a sequence of columns in a matrix.
/// \param start The first column in the sequence.
/// \param end The last column in the sequence.
function Mat Mat.getColumns(Integer start, Integer end) {
  Scalar newVals[];
  if (start > this.cols || end > this.cols)
    throw FUNC + ": colum index greater than number of columns (" + start + ", " + end + " of " + this.rows + ")";
  if (start < 0 || end < 0)
    throw FUNC + ": column index should be greater than zero";
  if (end < start)
    throw FUNC + ": start is greater than end (" + start + " vs " + end + ")";
  for (Integer j = start; j <= end; j++) {
    for (Integer i = 0; i <= this.rows - 1; i++) {
      newVals.push(this.vals[(i)*this.cols+j]);
    }
  }
  Mat newMat(end-start+1,this.rows);
  newMat.setAll(newVals);
  return newMat.transpose();
}

/// A value getter for a sequence of rows in a matrix.
/// \param start The first row in the sequence.
/// \param end The last row in the sequence.
function Mat Mat.getRows(Integer start, Integer end) {
  Mat emptuMat(0,0);
  Scalar newVals[];
  if (start > this.rows || end > this.rows)
    throw FUNC + ": row index greater than number of rows (" + start + ", " + end + " of " + this.rows + ")";
  if (start < 0 || end < 0) 
    throw FUNC + ": row index should be greater than zero";
  if (end < start)
    throw FUNC + ": start is greater than end (" + start + " vs " + end + ")";
  for (Integer j = start; j <= end; j++) {
    for (Integer i = 0; i < this.cols; i++) {
      newVals.push(this.vals[(j)*this.cols+i]);
    }
  }
  Mat new_mat(end-start+1,this.cols);
  new_mat.setAll(newVals);
  return new_mat;
}